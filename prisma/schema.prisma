// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  username  String
  role      USER_ROLE
  email     String
  password  String
  phone     String
  avatar    String    @default("https://ethereal-menu.s3.us-east-2.amazonaws.com/default/user/0d9cf5a5-5288-4f12-9c46-11795dc9d09c.jpeg")
  cpf       String?
  rg        String?
  birthDate DateTime? @map("birth_date") @db.Timestamp

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  addresses Address[]
  sellers   Seller[]

  @@map("user")
}

enum USER_ROLE {
  USER
  ADMIN
  DEV
  CUSTOMER
}

model Seller {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  imageUrl   String? @map("image_url")
  logoUrl    String? @map("logo_url")
  faviconUrl String? @map("favicon_url")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  addresses    Address[]
  products     Product[]
  categories   Category[]
  condominiums Condominium[]
  attributes   Attribute[]

  @@map("seller")
}

model Address {
  id           String  @id @default(uuid())
  street       String
  reference    String?
  complement   String?
  neighborhood String
  countryId    String  @map("country_id")
  stateId      String  @map("state_id")
  userId       String? @map("user_id")
  sellerId     String? @map("seller_id")
  postcode     String
  city         String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  seller  Seller? @relation(fields: [sellerId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
  state   State   @relation(fields: [stateId], references: [id])
  country Country @relation(fields: [countryId], references: [id])

  @@map("address")
}

model Country {
  id                 String  @id @default(uuid())
  name               String
  iso3               String  @map("iso_3")
  iso2               String  @map("iso_2")
  intermediaryRegion String? @map("intermediary_region")
  subRegion          String? @map("sub_region")
  continent          String?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  states  State[]
  address Address[]

  @@map("country")
}

model Currency {
  id     String @id @default(uuid())
  code   String
  symbol String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@map("currency")
}

model State {
  id        String    @id @default(uuid())
  name      String
  code3     String?   @map("code_3")
  ibgeId    String?   @map("ibge_id")
  region    String
  countryId String    @map("country_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  country Country   @relation(fields: [countryId], references: [id])
  address Address[]

  @@map("state")
}

model Menu {
  id    String  @id @default(uuid())
  label String?
  name  String
  icon  String?
  href  String?

  parentId String? @map("parent_id")
  parent   Menu?   @relation("SubMenu", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subMenus Menu[]  @relation("SubMenu")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@map("menu")
}

model Category {
  id   String @id @default(uuid())
  name String

  sellerId String @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  productCategories ProductCategory[]
  seller            Seller            @relation(fields: [sellerId], references: [id])

  @@map("category")
}

model ProductCategory {
  id         String @id @default(uuid())
  productId  String @map("product_Id")
  categoryId String @map("category_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("product_category")
}

model Product {
  id               String   @id @default(uuid())
  name             String
  shortDescription String   @map("short_description")
  description      String
  metaTitle        String   @map("meta_title")
  metaDescription  String   @map("meta_description")
  metaKeyword      String[] @default([]) @map("meta_keyword")
  price            Float
  isVisible        Boolean  @default(true) @map("is_visible")
  isActive         Boolean  @default(true) @map("is_active")
  sellerId         String   @map("seller_id")
  condominiumId    String?  @map("condominium_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  seller            Seller            @relation(fields: [sellerId], references: [id])
  productCategories ProductCategory[]
  specifications    Specification?
  condominium       Condominium?      @relation(fields: [condominiumId], references: [id])

  @@map("product")
}

model Condominium {
  id       String @id @default(uuid())
  name     String
  sellerId String @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  seller   Seller    @relation(fields: [sellerId], references: [id])
  products Product[]

  @@map("condominium")
}

model Specification {
  id           String  @id @default(uuid())
  buildingArea String  @map("building_area")
  totalArea    String  @map("total_area")
  isFurnished  Boolean @map("is_furnished")

  isBuilding      Boolean @map("is_building")
  buildingContext String? @map("building_context")

  isAcceptExchange Boolean @map("is_accept_exchange")
  exchangeContext  String? @map("exchange_context")

  productId String @unique @map("product_id")

  locations String[] @default([])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  product                 Product                  @relation(fields: [productId], references: [id])
  specificationAttributes SpecificationAttribute[]

  @@map("specification")
}

model SpecificationAttribute {
  id              String @id @default(uuid())
  attributeId     String @map("attribute_id")
  specificationId String @map("specification_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  specification Specification @relation(fields: [specificationId], references: [id])
  attribute     Attribute     @relation(fields: [attributeId], references: [id])

  @@map("specification_attribute")
}

model Attribute {
  id       String @id @default(uuid())
  name     String
  icon     String
  sellerId String @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  specificationAttributes SpecificationAttribute[]
  seller                  Seller                   @relation(fields: [sellerId], references: [id])

  @@map("attribute")
}
