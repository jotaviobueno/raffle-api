// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String
  password  String?
  phone     String?
  avatar    String    @default("https://ethereal-menu.s3.us-east-2.amazonaws.com/default/user/0d9cf5a5-5288-4f12-9c46-11795dc9d09c.jpeg")
  cpf       String?
  rg        String?
  birthDate DateTime? @map("birth_date") @db.Timestamp
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  addresses Address[]
  sellers   Seller[]
  userRoles UserRole[]

  @@map("user")
}

model UserRole {
  id     String @id @default(uuid())
  userId String @map("user_id")
  roleId String @map("role_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@map("user_role")
}

model Role {
  id   String @id @default(uuid())
  name String
  code String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  userRoles UserRole[]

  @@map("role")
}

model Seller {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  image   String @default("")
  logo    String @default("")
  favicon String @default("")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  addresses  Address[]
  categories Category[]
  raffles    Raffle[]

  @@map("seller")
}

model Address {
  id           String  @id @default(uuid())
  street       String
  reference    String?
  complement   String?
  neighborhood String
  countryId    String  @map("country_id")
  stateId      String  @map("state_id")
  userId       String? @map("user_id")
  sellerId     String? @map("seller_id")
  postcode     String
  city         String
  number       String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  seller  Seller? @relation(fields: [sellerId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
  state   State   @relation(fields: [stateId], references: [id])
  country Country @relation(fields: [countryId], references: [id])

  @@map("address")
}

model Country {
  id                 String  @id @default(uuid())
  name               String
  iso3               String  @map("iso_3")
  iso2               String  @map("iso_2")
  intermediaryRegion String? @map("intermediary_region")
  subRegion          String? @map("sub_region")
  continent          String?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  states  State[]
  address Address[]

  @@map("country")
}

model Currency {
  id     String @id @default(uuid())
  code   String
  symbol String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@map("currency")
}

model State {
  id        String    @id @default(uuid())
  name      String
  code3     String?   @map("code_3")
  ibgeId    String?   @map("ibge_id")
  region    String
  countryId String    @map("country_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  country Country   @relation(fields: [countryId], references: [id])
  address Address[]

  @@map("state")
}

model Menu {
  id    String  @id @default(uuid())
  label String?
  name  String
  icon  String?
  href  String?

  parentId String? @map("parent_id")
  parent   Menu?   @relation("SubMenu", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subMenus Menu[]  @relation("SubMenu")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@map("menu")
}

model Category {
  id   String @id @default(uuid())
  name String

  sellerId String @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  seller           Seller           @relation(fields: [sellerId], references: [id])
  raffleCategories RaffleCategory[]

  @@map("category")
}

model RaffleCategory {
  id         String @id @default(uuid())
  categoryId String @map("category_id")
  raffleId   String @map("raffle_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  category Category @relation(fields: [categoryId], references: [id])
  raffle   Raffle   @relation(fields: [raffleId], references: [id])

  @@map("raffle_category")
}

model Raffle {
  id               String   @id @default(uuid())
  name             String
  shortDescription String   @map("short_description")
  description      String
  metaTitle        String   @map("meta_title")
  metaDescription  String   @map("meta_description")
  metaKeyword      String[] @default([]) @map("meta_keyword")
  price            Float
  isVisible        Boolean  @default(true) @map("is_visible")
  isActive         Boolean  @default(true) @map("is_active")
  sellerId         String   @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  seller           Seller           @relation(fields: [sellerId], references: [id])
  raffleCategories RaffleCategory[]

  @@map("raffle")
}
