// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String
  password  String?
  phone     String?
  avatar    String    @default("https://ethereal-menu.s3.us-east-2.amazonaws.com/default/user/0d9cf5a5-5288-4f12-9c46-11795dc9d09c.jpeg")
  cpf       String?
  rg        String?
  birthDate DateTime? @map("birth_date") @db.Timestamp
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  addresses     Address[]
  sellers       Seller[]
  userRoles     UserRole[]
  orders        Order[]
  orderHistoies OrderHistory[]

  @@map("user")
}

model UserRole {
  id     String @id @default(uuid())
  userId String @map("user_id")
  roleId String @map("role_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@map("user_role")
}

model Role {
  id   String @id @default(uuid())
  name String
  code String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  userRoles UserRole[]

  @@map("role")
}

model Seller {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  logo String?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  addresses    Address[]
  categories   Category[]
  raffles      Raffle[]
  orders       Order[]
  quotas       Quotas[]
  awards       Award[]
  socialMedias SocialMedia[]
  packs        Pack[]

  @@map("seller")
}

model SocialMedia {
  id   String @id @default(uuid())
  name String
  href String

  sellerId String @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  seller Seller @relation(fields: [sellerId], references: [id])

  @@map("social_midia")
}

model Address {
  id           String  @id @default(uuid())
  street       String
  reference    String?
  complement   String?
  neighborhood String
  countryId    String  @map("country_id")
  stateId      String  @map("state_id")
  userId       String? @map("user_id")
  sellerId     String? @map("seller_id")
  postcode     String
  city         String
  number       String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  seller  Seller?  @relation(fields: [sellerId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])
  state   State    @relation(fields: [stateId], references: [id])
  country Country  @relation(fields: [countryId], references: [id])
  payment Payment?

  @@map("address")
}

model Country {
  id                 String  @id @default(uuid())
  name               String
  iso3               String  @map("iso_3")
  iso2               String  @map("iso_2")
  intermediaryRegion String? @map("intermediary_region")
  subRegion          String? @map("sub_region")
  continent          String?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  states  State[]
  address Address[]

  @@map("country")
}

model Currency {
  id     String @id @default(uuid())
  code   String
  symbol String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@map("currency")
}

model State {
  id        String    @id @default(uuid())
  name      String
  code3     String?   @map("code_3")
  ibgeId    String?   @map("ibge_id")
  region    String
  countryId String    @map("country_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  country Country   @relation(fields: [countryId], references: [id])
  address Address[]

  @@map("state")
}

model Menu {
  id    String  @id @default(uuid())
  label String?
  name  String
  icon  String?
  href  String?

  parentId String? @map("parent_id")
  parent   Menu?   @relation("SubMenu", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subMenus Menu[]  @relation("SubMenu")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@map("menu")
}

model Category {
  id   String @id @default(uuid())
  name String

  sellerId String @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  seller           Seller           @relation(fields: [sellerId], references: [id])
  raffleCategories RaffleCategory[]

  @@map("category")
}

model RaffleCategory {
  id         String @id @default(uuid())
  categoryId String @map("category_id")
  raffleId   String @map("raffle_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  category Category @relation(fields: [categoryId], references: [id])
  raffle   Raffle   @relation(fields: [raffleId], references: [id])

  @@map("raffle_category")
}

model Raffle {
  id               String   @id @default(uuid())
  title            String
  metaTitle        String   @map("meta_title")
  shortDescription String   @map("short_description")
  description      String
  images           String[] @default([])
  metaDescription  String   @map("meta_description")
  metaKeyword      String[] @default([]) @map("meta_keyword")
  price            Float
  isVisible        Boolean  @default(true) @map("is_visible")
  isActive         Boolean  @default(true) @map("is_active")
  sellerId         String   @map("seller_id")

  minBuyQuotas   Int   @map("min_buy_quotas")
  maxBuyQuotas   Int   @map("max_buy_quotas")
  totalQuotas    Int   @map("total_quotas")
  payeds         Int   @default(0)
  freePercentage Float @default(100) @map("free_percentage")

  drawDateAt DateTime  @map("draw_date_at") @db.Timestamp
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt  DateTime? @map("deleted_at") @db.Timestamp

  seller           Seller           @relation(fields: [sellerId], references: [id])
  raffleCategories RaffleCategory[]
  packs            Pack[]
  awards           Award[]
  quotas           Quotas[]
  raffleCoupons    RaffleCoupon[]

  @@map("raffle")
}

model Pack {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  raffleId String @map("raffle_id")
  sellerId String @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  raffle Raffle   @relation(fields: [raffleId], references: [id])
  seller Seller   @relation(fields: [sellerId], references: [id])
  quotas Quotas[]

  @@map("pack")
}

model Quotas {
  id       String  @id @default(uuid())
  number   Int
  raffleId String  @map("raffle_id")
  packId   String? @map("pack_id")
  sellerId String  @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  pack   Pack?  @relation(fields: [packId], references: [id])
  raffle Raffle @relation(fields: [raffleId], references: [id])
  seller Seller @relation(fields: [sellerId], references: [id])

  @@map("quotas")
}

model Award {
  id       String @id @default(uuid())
  name     String
  raffleId String @map("raffle_id")
  sellerId String @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  raffle Raffle @relation(fields: [raffleId], references: [id])
  seller Seller @relation(fields: [sellerId], references: [id])

  @@map("award")
}

model RaffleCoupon {
  id       String @id @default(uuid())
  raffleId String @map("raffle_id")
  couponId String @map("coupon_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  coupon Coupon @relation(fields: [couponId], references: [id])
  raffle Raffle @relation(fields: [raffleId], references: [id])

  @@map("raffle_coupon")
}

model Order {
  id            String  @id @default(uuid())
  sellerId      String  @map("seller_id")
  customerId    String  @map("customer_id")
  invoiceNumber Int     @map("invoice_number")
  invoicePrefix String  @map("invoice_prefix")
  comment       String?
  ip            String
  userAgent     String  @map("user_agent")
  orderStatusId String  @map("order_status_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  seller         Seller         @relation(fields: [sellerId], references: [id])
  customer       User           @relation(fields: [customerId], references: [id])
  payment        Payment?
  orderTotal     OrderTotal?
  orderCoupon    OrderCoupon?
  orderItems     OrderItem[]
  orderHistories OrderHistory[]
  orderStatus    OrderStatus    @relation(fields: [orderStatusId], references: [id])

  @@map("order")
}

model OrderHistory {
  id String @id @default(uuid())

  comment    String?
  orderId    String  @map("order_id")
  customerId String  @map("customer_id")

  orderStatusId String @map("order_status_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  order       Order       @relation(fields: [orderId], references: [id])
  customer    User        @relation(fields: [customerId], references: [id])
  orderStatus OrderStatus @relation(fields: [orderStatusId], references: [id])

  @@map("order_history")
}

model OrderCoupon {
  id String @id @default(uuid())

  orderId  String @unique @map("order_id")
  couponId String @unique @map("coupon_id")

  code     String
  discount Float

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  order Order @relation(fields: [orderId], references: [id])

  coupon Coupon @relation(fields: [couponId], references: [id])

  @@map("order_coupon")
}

model Coupon {
  id               String  @id @default(uuid())
  name             String
  code             String
  discount         Int     @default(0)
  usages           Int     @default(0)
  maxUsages        Int     @default(0) @map("max_usages")
  maxUsagesPerUser Int     @default(0) @map("max_usages_per_user")
  utmSource        String  @map("utm_source")
  utmCampaign      String  @map("utm_campaing")
  isActive         Boolean @map("is_active")

  from DateTime? @db.Timestamp
  to   DateTime? @db.Timestamp

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  orderCoupon   OrderCoupon?
  raffleCoupons RaffleCoupon[]

  @@map("coupon")
}

model OrderStatus {
  id   String @id @default(uuid())
  name String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  orderHistories OrderHistory[]
  Order          Order[]

  @@map("order_status")
}

model OrderItem {
  id       String @id @default(uuid())
  name     String
  quantity Int
  price    Float
  total    Float
  tax      Float

  //  adicionar a referencia entre a rifa e o item

  orderId String @map("order_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  order Order @relation(fields: [orderId], references: [id])

  @@map("order_item")
}

model OrderTotal {
  id      String @id @default(uuid())
  orderId String @unique @map("order_id")

  subtotal       Float
  discount       Float
  discountManual Float @map("discount_manual")
  shipping       Float
  total          Float

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  order Order @relation(fields: [orderId], references: [id])

  @@map("order_total")
}

model Payment {
  id      String @id @default(uuid())
  orderId String @unique
  method  String

  addressId String @unique @map("address_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  order      Order       @relation(fields: [orderId], references: [id])
  pix        Pix?
  creditCard CreditCard?
  address    Address     @relation(fields: [addressId], references: [id])

  @@map("payment")
}

model CreditCard {
  id              String @id @default(uuid())
  brand           String
  number          String
  name            String
  expirationMonth Int    @map("expiration_month")
  expirationYear  Int    @map("expiration_year")
  cvv             Int
  token           String
  status          String

  paymentId String @unique @map("payment_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  payment Payment @relation(fields: [paymentId], references: [id])

  @@map("credit_card")
}

model Pix {
  id        String @id @default(uuid())
  paymentId String @unique @map("payment_id")

  copyPaste String @map("copy_paste")
  image     String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp
  expiratAt DateTime  @map("expirat_at") @db.Timestamp

  payment Payment @relation(fields: [paymentId], references: [id])

  @@map("pix")
}
